-- entities
CREATE TABLE COMPILATION_UNIT ( ID INT, NAME VARCHAR(2048), PACKAGE VARCHAR(2048) );
CREATE TABLE CLASS ( ID INT, NAME VARCHAR(2048), IS_ABSTRACT INT, IS_FINAL INT, IS_PUBLIC INT, CU_ID INT , FOREIGN KEY(CU_ID) REFERENCES COMPILATION_UNIT(ID));
CREATE TABLE INTERFACE ( ID INT, NAME VARCHAR(2048), IS_FINAL INT, IS_PUBLIC INT, CU_ID INT , FOREIGN KEY(CU_ID) REFERENCES COMPILATION_UNIT(ID));
CREATE TABLE ANNOTATION ( ID INT, NAME VARCHAR(2048), IS_PUBLIC INT, CU_ID INT , FOREIGN KEY(CU_ID) REFERENCES COMPILATION_UNIT(ID));
CREATE TABLE ENUMERATION ( ID INT, NAME VARCHAR(2048), IS_PUBLIC INT, CU_ID INT , FOREIGN KEY(CU_ID) REFERENCES COMPILATION_UNIT(ID));
CREATE TABLE FIELD ( ID INT, NAME VARCHAR(4096), TYPE VARCHAR(512), IS_PUBLIC INT, IS_STATIC INT, IS_FINAL INT, IS_TRANSIENT INT, TYPE_ID INT );
CREATE TABLE CONSTRUCTOR ( ID INT, NAME VARCHAR(4096), IS_PUBLIC INT, TYPE_ID INT );
CREATE TABLE METHOD ( ID INT, NAME VARCHAR(4096), IS_ABSTRACT INT, IS_FINAL INT, IS_PUBLIC INT, TYPE_ID INT );
CREATE TABLE PARAMETER ( ID INT, NAME VARCHAR(4096), TYPE VARCHAR(512), METHOD_ID INT , FOREIGN KEY(METHOD_ID) REFERENCES METHOD(ID));

-- relations
CREATE TABLE EXTENDS ( TYPE_ID INT, EXTENDED_TYPE_ID INT ); -- KEY = (TYPE_ID, EXTENDED_TYPE_ID)
CREATE TABLE IMPLEMENTS ( CLASS_ID INT, INTERFACE_ID INT ); -- KEY = (CLASS_ID, INTERFACE_ID)


-- TODOS

-- 1. FIELD.TYPE_ID, CONSTRUCTOR.TYPE_ID and METHOD.TYPE_ID are FK to CLASS(ID) or INTERFACE(ID) ..
--    Should CLASS and INTERFACE be merged into TYPE with a discriminator column IS_INTERFACE ?
--    It is easier and more natural to write "Select * from Interface" than "Select * from Type where Is_Interface = true"..

-- 2. Should full qualified package name be added in types tables (class, interface, annotation and enumeration) ?
--    This will avoid a join with Compilation_Unit. After all, this is a reporting database, no problem if it is not in 3rd normal form :=)